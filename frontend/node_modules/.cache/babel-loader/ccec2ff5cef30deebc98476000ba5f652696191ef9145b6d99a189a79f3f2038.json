{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sreeram\\\\Desktop\\\\tour-management\\\\frontend\\\\src\\\\pages\\\\SearchResultList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport CommonSection from './../shared/CommonSection';\nimport { Container, Row, Col } from 'reactstrap';\nimport { useLocation } from 'react-router-dom';\nimport TourCard from '../shared/TourCard';\nimport Newsletter from './../components/NewsLetter/NewsLetter';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchResultList = () => {\n  _s();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const city = searchParams.get('city');\n  const distance = searchParams.get('distance');\n  const maxGroupSize = searchParams.get('maxGroupSize');\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    // Fetch data based on query parameters here\n    // For example, you can make an API call using city, distance, and maxGroupSize\n    // and then update the \"data\" state with the fetched results\n    // Replace this with your actual fetch logic\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`YOUR_API_ENDPOINT?city=${city}&distance=${distance}&maxGroupSize=${maxGroupSize}`);\n        const result = await response.json();\n        setData(result.data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, [city, distance, maxGroupSize]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CommonSection, {\n      title: \"Tour Search Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: data.length === 0 ? /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"text-center\",\n            children: \"No Tour Found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, this) : data.map(tour => /*#__PURE__*/_jsxDEV(Col, {\n            lg: \"3\",\n            className: \"mb-4\",\n            children: /*#__PURE__*/_jsxDEV(TourCard, {\n              tour: tour\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 19\n            }, this)\n          }, tour._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Newsletter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(SearchResultList, \"D4gzE808Pvu6kELzzy1SZRZILNU=\", false, function () {\n  return [useLocation];\n});\n_c = SearchResultList;\nexport default SearchResultList;\nvar _c;\n$RefreshReg$(_c, \"SearchResultList\");","map":{"version":3,"names":["React","useEffect","useState","CommonSection","Container","Row","Col","useLocation","TourCard","Newsletter","SearchResultList","location","searchParams","URLSearchParams","search","city","get","distance","maxGroupSize","data","setData","fetchData","response","fetch","result","json","error","console","length","map","tour","_id"],"sources":["C:/Users/Sreeram/Desktop/tour-management/frontend/src/pages/SearchResultList.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport CommonSection from './../shared/CommonSection';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport { useLocation } from 'react-router-dom';\r\nimport TourCard from '../shared/TourCard';\r\nimport Newsletter from './../components/NewsLetter/NewsLetter';\r\n\r\nconst SearchResultList = () => {\r\n  const location = useLocation();\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const city = searchParams.get('city');\r\n  const distance = searchParams.get('distance');\r\n  const maxGroupSize = searchParams.get('maxGroupSize');\r\n\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch data based on query parameters here\r\n    // For example, you can make an API call using city, distance, and maxGroupSize\r\n    // and then update the \"data\" state with the fetched results\r\n    // Replace this with your actual fetch logic\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `YOUR_API_ENDPOINT?city=${city}&distance=${distance}&maxGroupSize=${maxGroupSize}`\r\n        );\r\n        const result = await response.json();\r\n        setData(result.data);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [city, distance, maxGroupSize]);\r\n\r\n  return (\r\n    <>\r\n      <CommonSection title=\"Tour Search Results\" />\r\n      <section>\r\n        <Container>\r\n          <Row>\r\n            {data.length === 0 ? (\r\n              <h4 className=\"text-center\">No Tour Found</h4>\r\n            ) : (\r\n              data.map((tour) => (\r\n                <Col lg=\"3\" className=\"mb-4\" key={tour._id}>\r\n                  <TourCard tour={tour} />\r\n                </Col>\r\n              ))\r\n            )}\r\n          </Row>\r\n        </Container>\r\n      </section>\r\n      <Newsletter />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchResultList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,aAAa,MAAM,2BAA2B;AACrD,SAASC,SAAS,EAAEC,GAAG,EAAEC,GAAG,QAAQ,YAAY;AAChD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,QAAQ,MAAM,oBAAoB;AACzC,OAAOC,UAAU,MAAM,uCAAuC;AAAC;AAAA;AAE/D,MAAMC,gBAAgB,GAAG,MAAM;EAAA;EAC7B,MAAMC,QAAQ,GAAGJ,WAAW,EAAE;EAC9B,MAAMK,YAAY,GAAG,IAAIC,eAAe,CAACF,QAAQ,CAACG,MAAM,CAAC;EACzD,MAAMC,IAAI,GAAGH,YAAY,CAACI,GAAG,CAAC,MAAM,CAAC;EACrC,MAAMC,QAAQ,GAAGL,YAAY,CAACI,GAAG,CAAC,UAAU,CAAC;EAC7C,MAAME,YAAY,GAAGN,YAAY,CAACI,GAAG,CAAC,cAAc,CAAC;EAErD,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACd;IACA;IACA;IACA;IACA,MAAMoB,SAAS,GAAG,YAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,0BAAyBR,IAAK,aAAYE,QAAS,iBAAgBC,YAAa,EAAC,CACnF;QACD,MAAMM,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;QACpCL,OAAO,CAACI,MAAM,CAACL,IAAI,CAAC;MACtB,CAAC,CAAC,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDL,SAAS,EAAE;EACb,CAAC,EAAE,CAACN,IAAI,EAAEE,QAAQ,EAAEC,YAAY,CAAC,CAAC;EAElC,oBACE;IAAA,wBACE,QAAC,aAAa;MAAC,KAAK,EAAC;IAAqB;MAAA;MAAA;MAAA;IAAA,QAAG,eAC7C;MAAA,uBACE,QAAC,SAAS;QAAA,uBACR,QAAC,GAAG;UAAA,UACDC,IAAI,CAACS,MAAM,KAAK,CAAC,gBAChB;YAAI,SAAS,EAAC,aAAa;YAAA,UAAC;UAAa;YAAA;YAAA;YAAA;UAAA,QAAK,GAE9CT,IAAI,CAACU,GAAG,CAAEC,IAAI,iBACZ,QAAC,GAAG;YAAC,EAAE,EAAC,GAAG;YAAC,SAAS,EAAC,MAAM;YAAA,uBAC1B,QAAC,QAAQ;cAAC,IAAI,EAAEA;YAAK;cAAA;cAAA;cAAA;YAAA;UAAG,GADQA,IAAI,CAACC,GAAG;YAAA;YAAA;YAAA;UAAA,QAG3C;QACF;UAAA;UAAA;UAAA;QAAA;MACG;QAAA;QAAA;QAAA;MAAA;IACI;MAAA;MAAA;MAAA;IAAA,QACJ,eACV,QAAC,UAAU;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA,gBACb;AAEP,CAAC;AAAC,GAlDIrB,gBAAgB;EAAA,QACHH,WAAW;AAAA;AAAA,KADxBG,gBAAgB;AAoDtB,eAAeA,gBAAgB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}